{"version":3,"sources":["webpack://CanvasUtils/webpack/universalModuleDefinition","webpack://CanvasUtils/webpack/bootstrap","webpack://CanvasUtils/./src/utils/math.js","webpack://CanvasUtils/./src/utils/index.js","webpack://CanvasUtils/./src/canvas-utils.js","webpack://CanvasUtils/./src/text.js","webpack://CanvasUtils/./src/gradient.js","webpack://CanvasUtils/./src/pixel.js","webpack://CanvasUtils/./src/index.js","webpack://CanvasUtils/./src/helper/coordinate-helper.js","webpack://CanvasUtils/./src/image.js","webpack://CanvasUtils/./src/shape.js","webpack://CanvasUtils/./src/path.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","degToRad","deg","Math","PI","calcBoundingRect","rect","boundingRect","top","y","bottom","height","left","x","right","width","assign","utils","math_namespaceObject","CanvasUtils","[object Object]","id","component","this","args","ctx","wx","createCanvasContext","DEFAULT_TEXT_CONFIG","fontSize","color","baseLine","textAlign","lineHeight","bold","maxWidth","undefined","draw","textIndent","config","CANVAS_HEIGHT","CANVAS_WIDTH","text","coordinate","gear","lineWidth","dashWidth","gapWidth","reverse","Promise","resolve","text_ctx","_recalcAlignTextRect","_drawText","rowSpace","setFontSize","setFillStyle","setTextAlign","fillText","measureText","_nextLine","prevLine","_isLineBreak","char","test","_isOverMaxWidth","setText","options","getContext","lineLimit","setTextBaseline","_containsLineBreak","lineNumber","length","lineText","substring","printText","slice","linearGradientRegex","parseLinearGradientString","gradientString","type","replace","paramArray","split","parseFloat","factors","concat","tan","stops","arr","push","circularGradientRegex","parseCircularGradientString","copyPixel","getCanvasId","getComponent","reject","canvasGetImageData","canvasId","success","res","fail","err","pastePixel","data","canvasPutImageData","drawCoordinate","times","setLineWidth","setLineDash","setStrokeStyle","beginPath","moveTo","lineTo","stroke","closePath","calcTextBoundingRect","loadImages","srcs","promises","map","item","getImageInfo","src","all","drawImage","image","borderRadius","borderWidth","borderColor","imgX","imgY","imgWidth","imgHeight","apsectWidth","apsectHeight","isWidthMoreLong","needCutOut","path","fillRect","save","createRectPath","clip","restore","isLinearGradientString","createLinearGradient","isCircularGradientString","createCircularGradient","max","fill","strokeRect","currBorderWidth","radius","leftTop","rightTop","rightBottom","leftBottom","arc","gradientParams","console","log","abs","grd","forEach","addColorStop","copy","paste","__webpack_exports__"],"mappings":"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","file":"canvas-utils.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CanvasUtils\"] = factory();\n\telse\n\t\troot[\"CanvasUtils\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const degToRad = function(deg) {\n  return (Math.PI * deg) / 180\n}\n\n// 计算矩形的bounding rect\nexport const calcBoundingRect = function(rect) {\n  const boundingRect = {\n    top: rect.y,\n    bottom: rect.y + rect.height,\n    left: rect.x,\n    right: rect.x + rect.width,\n  }\n  return Object.assign({}, rect, boundingRect)\n}\n","import * as math from './math'\n\nexport default {\n  ...math,\n}\n","export default class CanvasUtils {\n  constructor(id, component) {\n    this.args = {\n      id,\n      component,\n    }\n    this.ctx = wx.createCanvasContext(id, component)\n    this.DEFAULT_TEXT_CONFIG = {\n      fontSize: 16,\n      color: '#000',\n      baseLine: 'top',\n      textAlign: 'left',\n      lineHeight: 16,\n      bold: false,\n      maxWidth: undefined,\n      draw: true /** 是否需要绘制出来，当测量时不需要绘制出来 */,\n      textIndent: 0,\n    }\n\n    this.config = {\n      CANVAS_HEIGHT: 1750,\n      CANVAS_WIDTH: 1750,\n      /** 当前的文字配置 */\n      text: Object.assign({}, this.DEFAULT_TEXT_CONFIG),\n      coordinate: {\n        gear: 50,\n        lineWidth: 1,\n        dashWidth: 1,\n        gapWidth: 5,\n      },\n    }\n  }\n\n  getContext() {\n    return this.ctx\n  }\n\n  getCanvasId() {\n    return this.args.id\n  }\n\n  getComponent() {\n    return this.args.component\n  }\n\n  /**\n   * 渲染\n   */\n  draw(reverse = true) {\n    return new Promise(resolve => {\n      this.ctx.draw(reverse, () => {\n        resolve()\n      })\n    })\n  }\n}\n","/**\n * 文字处理\n * 要实现：\n * 1. 文本换行\n * 2. 文本加粗\n */\nimport utils from './utils/index'\nlet config\nlet ctx\nlet DEFAULT_TEXT_CONFIG\n\n// 重新计算对齐方式不同的文本的 rect\nfunction _recalcAlignTextRect(rect, textAlign) {\n  if (textAlign === 'right') {\n    rect.x -= rect.width\n    return rect\n  } else if (textAlign === 'center') {\n    rect.x -= rect.width / 2\n    return rect\n  } else {\n    return rect\n  }\n}\n\n// 画文字\nfunction _drawText(text = '', x = 0, y = 0, draw = true, textIndent = 0) {\n  const {lineHeight, fontSize, color, textAlign} = config.text\n  const rowSpace = (lineHeight - fontSize) / 2\n  const offsetY = -3 /** 修复文字上方的默认空隙 */\n  ctx.setFontSize(fontSize)\n  ctx.setFillStyle(color)\n  ctx.setTextAlign(textAlign)\n  if (draw) {\n    ctx.fillText(text, x + rowSpace + textIndent, y + rowSpace + offsetY)\n  }\n  // 用 stroke 会导致字体模糊\n  // if(bold) {\n  //   ctx.setStrokeStyle(color)\n  //   draw ? ctx.strokeText(text, x + rowSpace + textIndent, y + rowSpace + offsetY) : doNoThing;\n  // }\n\n  // 当前行\n  const rect = {\n    x,\n    y,\n    width: ctx.measureText('' + text).width + textIndent,\n    height: lineHeight,\n  }\n\n  return utils.calcBoundingRect(rect)\n}\n\n// 画下一行文字\nfunction _nextLine(text, prevLine, draw = true) {\n  const {x, y, height} = prevLine\n  return _drawText(text, x, y + height, draw)\n}\n\n// 判断是否是换行符\nfunction _isLineBreak(char) {\n  const regex = /\\n|\\r/\n  return regex.test(char)\n}\n\n// 判断是否含有换行符\nfunction _containsLineBreak(text) {\n  const regex = /\\n|\\r/g\n  return regex.test(text)\n}\n\nconst _isOverMaxWidth = function(text, fontSize, textIndent = 0, maxWidth) {\n  ctx.setFontSize(fontSize)\n  return ctx.measureText(text + '').width + textIndent > maxWidth\n}\n\nexport function setText(text, x, y, options) {\n  config = this.config\n  DEFAULT_TEXT_CONFIG = this.DEFAULT_TEXT_CONFIG\n  ctx = this.getContext()\n  Object.assign(config.text, DEFAULT_TEXT_CONFIG, options)\n\n  // 状态的设置要尽快执行，不然会影响到 measureText\n  const {fontSize, baseLine, draw, lineLimit, textAlign, textIndent} = config.text\n  let {maxWidth, lineHeight} = config.text\n  maxWidth = maxWidth || config.CANVAS_WIDTH\n  if (lineHeight < fontSize) {\n    lineHeight = fontSize\n    config.text.lineHeight = fontSize\n  }\n  ctx.setFontSize(fontSize)\n  ctx.setTextBaseline(baseLine)\n\n  if (_isOverMaxWidth(text, fontSize, textIndent, maxWidth) || _containsLineBreak(text)) {\n    // 需要分行\n    let prevLine = {}\n    let lineNumber = 0\n    for (let i = 1; i <= text.length; i++) {\n      // 到达限制行数\n      if (lineLimit > 0 && lineNumber === lineLimit) {\n        text = ''\n        break\n      }\n\n      let lineText = text.substring(0, i)\n      // 换行\n      if (\n        _isOverMaxWidth(lineText, fontSize, lineNumber === 0 ? textIndent : 0, maxWidth) ||\n        _isLineBreak(lineText[lineText.length - 1])\n      ) {\n        let printText\n        if (_isLineBreak(lineText[lineText.length - 1])) {\n          // 换行符换行\n          printText = lineText.slice(0, lineText.length - 1)\n          text = text.slice(lineText.length, text.length)\n        } else {\n          // 普通换行\n          printText = lineText.slice(0, lineText.length - 1)\n          text = text.slice(printText.length, text.length)\n        }\n        if (lineNumber === 0) {\n          prevLine = _drawText(printText, x, y, draw, textIndent)\n        } else {\n          prevLine = _nextLine(printText, prevLine, draw)\n        }\n        i = 0\n        lineNumber++\n      }\n    }\n\n    // 区分最后一行有无文字\n    if (text) {\n      _nextLine(text, prevLine, draw)\n      lineNumber++\n    }\n\n    let rect = {\n      x,\n      y,\n      width: maxWidth,\n      height: lineNumber * lineHeight,\n    }\n    rect = _recalcAlignTextRect(rect, textAlign)\n    return utils.calcBoundingRect(rect)\n  } else {\n    // 不需要分行\n    let rect = _drawText(text, x, y, draw, textIndent)\n    rect = _recalcAlignTextRect(rect, textAlign)\n    return utils.calcBoundingRect(rect)\n  }\n}\n\n// 计算文字的包围盒\nexport const calcTextBoundingRect = function(text, x, y, options) {\n  return setText(text, x, y, {...options, draw: false})\n}\n","/**\n * 渐变\n */\nimport utils from './utils/index'\n\nconst linearGradientRegex = /^(linear-gradient)\\((-?\\d+deg,(#[0-9a-fA-F]{6} \\d+%,?)+)\\);?$/g\n\n// 判断一个字符串是否是符合规范的线性渐变字符串\nexport function isLinearGradientString(gradientString) {\n  // linear-gradient(-180deg, #FFFFFF 0%, #D7EAFF 100%)\n  gradientString = gradientString.replace(/, /g, ',')\n  return linearGradientRegex.test(gradientString)\n}\n\n// 将线性渐变字符串转成对象表示\nexport function parseLinearGradientString(gradientString) {\n  gradientString = gradientString.replace(/, /g, ',')\n  const type = gradientString.replace(linearGradientRegex, '$1')\n  const paramArray = gradientString.replace(linearGradientRegex, '$2').split(',')\n\n  // 将所有角度转成正角\n  let deg = parseFloat(paramArray[0])\n\n  let factors = [1, 1]\n  switch (deg % 360) {\n    case 0: {\n      factors = factors.concat([1, 0])\n      break\n    }\n    case 90: {\n      factors = factors.concat([0, 1])\n      break\n    }\n    case 180: {\n      factors = factors.concat([0, -1])\n      break\n    }\n    case 270: {\n      factors = factors.concat([-1, 0])\n      break\n    }\n    default: {\n      factors = factors.concat([1, 1 / Math.tan(utils.degToRad(deg))])\n    }\n  }\n\n  let stops = []\n  for (let i = 1; i < paramArray.length; i++) {\n    const arr = paramArray[i].split(' ')\n    stops.push([parseFloat(arr[1]) / 100, arr[0]])\n  }\n\n  return {\n    type,\n    factors,\n    stops,\n  }\n}\n\n// 创建线性渐变\n// 注意： 1. gradientString 的角度不支持负数\nexport function createLinearGradient(x, y, width, height, gradientString) {\n  const ctx = this.getContext()\n  const gradientParams = parseLinearGradientString(gradientString)\n  console.log(x, y, x + Math.abs(width * gradientParams.factors[2]), y + Math.abs(height * gradientParams.factors[3]))\n  const grd = ctx.createLinearGradient(\n    x,\n    y,\n    x + Math.abs(width * gradientParams.factors[2]),\n    y + Math.abs(height * gradientParams.factors[3])\n  )\n  const stops = gradientParams.stops\n  console.log(stops)\n  stops.forEach(item => {\n    grd.addColorStop(item[0], item[1])\n  })\n  return grd\n}\n\nconst circularGradientRegex = /^(circular-gradient)\\(((#[0-9a-fA-F]{6} \\d+%,?)+)\\);?$/g\n\n// 判断一个字符串是否是符合规范的径向渐变字符串\nexport function isCircularGradientString(gradientString) {\n  gradientString = gradientString.replace(/, /g, ',')\n  return circularGradientRegex.test(gradientString)\n}\n\n// 将径向渐变字符串转成对象表示\nexport function parseCircularGradientString(gradientString) {\n  gradientString = gradientString.replace(/, /g, ',')\n  const type = gradientString.replace(circularGradientRegex, '$1')\n  const paramArray = gradientString.replace(circularGradientRegex, '$2').split(',')\n  let stops = []\n  for (let i = 0; i < paramArray.length; i++) {\n    const arr = paramArray[i].split(' ')\n    stops.push([parseFloat(arr[1]) / 100, arr[0]])\n  }\n\n  return {\n    type,\n    stops,\n  }\n}\n\nexport function createCircularGradient(x, y, radius, gradientString) {\n  const ctx = this.getContext()\n  const gradientParams = parseCircularGradientString(gradientString)\n  const stops = gradientParams.stops\n  const grd = ctx.createCircularGradient(x, y, radius)\n  stops.forEach(item => {\n    grd.addColorStop(item[0], item[1])\n  })\n  return grd\n}\n","/**\n * 像素操作\n */\n\n// 拷贝像素区域\nexport function copyPixel(rect) {\n  const id = this.getCanvasId()\n  const component = this.getComponent()\n  return new Promise((resolve, reject) => {\n    const {x, y, width, height} = rect\n    wx.canvasGetImageData(\n      {\n        canvasId: id,\n        x,\n        y,\n        width,\n        height,\n        success: res => resolve(res),\n        fail: err => reject(err),\n      },\n      component\n    )\n  })\n}\n\n// 粘贴像素区域\nexport function pastePixel(data, rect) {\n  const id = this.getCanvasId()\n  const component = this.getComponent()\n  return new Promise((resolve, reject) => {\n    const {x, y, width, height} = rect\n    wx.canvasPutImageData(\n      {\n        canvasId: id,\n        data,\n        x,\n        y,\n        width,\n        height,\n        success: res => resolve(res),\n        fail: err => reject(err),\n      },\n      component\n    )\n  })\n}\n","import utils from './utils/index'\nimport CanvasUtils from './canvas-utils'\nimport {drawCoordinate} from './helper/coordinate-helper'\nimport {setText, calcTextBoundingRect} from './text'\nimport {loadImages, drawImage} from './image'\nimport {fillRect, strokeRect} from './shape'\nimport {createRectPath} from './path'\nimport {\n  isLinearGradientString,\n  parseLinearGradientString,\n  createLinearGradient,\n  isCircularGradientString,\n  parseCircularGradientString,\n  createCircularGradient,\n} from './gradient'\nimport {copyPixel, pastePixel} from './pixel'\n\nCanvasUtils.prototype.drawCoordinate = drawCoordinate\nCanvasUtils.prototype.calcBoundingRect = utils.calcBoundingRect\nCanvasUtils.prototype.setText = setText\nCanvasUtils.prototype.calcTextBoundingRect = calcTextBoundingRect\nCanvasUtils.prototype.loadImages = loadImages\nCanvasUtils.prototype.drawImage = drawImage\nCanvasUtils.prototype.fillRect = fillRect\nCanvasUtils.prototype.strokeRect = strokeRect\nCanvasUtils.prototype.createRectPath = createRectPath\nCanvasUtils.prototype.isLinearGradientString = isLinearGradientString\nCanvasUtils.prototype.parseLinearGradientString = parseLinearGradientString\nCanvasUtils.prototype.createLinearGradient = createLinearGradient\nCanvasUtils.prototype.isCircularGradientString = isCircularGradientString\nCanvasUtils.prototype.parseCircularGradientString = parseCircularGradientString\nCanvasUtils.prototype.createCircularGradient = createCircularGradient\nCanvasUtils.prototype.copyPixel = copyPixel\nCanvasUtils.prototype.copy = copyPixel /** 兼容旧版本 */\nCanvasUtils.prototype.pastePixel = pastePixel\nCanvasUtils.prototype.paste = pastePixel /** 兼容旧版本 */\n\nexport default CanvasUtils\n","/**\n * 参考系统\n */\nexport function drawCoordinate(options) {\n  const config = this.config\n  const ctx = this.getContext()\n  Object.assign(config.coordinate, options)\n  const {CANVAS_HEIGHT, CANVAS_WIDTH} = config\n  const {gear, lineWidth, dashWidth, gapWidth} = config.coordinate\n  const times = CANVAS_HEIGHT / gear\n  ctx.setLineWidth(lineWidth)\n  ctx.setLineDash([dashWidth, gapWidth], 0)\n  ctx.setStrokeStyle('#CCC')\n  for (let i = 0; i < times; i++) {\n    ctx.beginPath()\n    ctx.moveTo(0, i * gear)\n    ctx.lineTo(CANVAS_WIDTH, i * gear)\n    ctx.stroke()\n    ctx.moveTo(i * gear, 0)\n    ctx.lineTo(i * gear, CANVAS_HEIGHT)\n    ctx.stroke()\n    ctx.closePath()\n  }\n}\n","/**\n * 图像\n * 要实现的效果如下：\n * 1. 能够设置图片的圆角\n * 2. 能够描边，支持矩形/圆角形状\n * 3. 能够设置图片的裁剪效果和缩放，和微信 image 的 mode 对应\n */\nimport utils from './utils/index'\n\nexport function loadImages(srcs) {\n  const promises = srcs.map(item => {\n    return new Promise((resolve, reject) => {\n      // TODO 要缓存图片\n      wx.getImageInfo({\n        src: item,\n        success: res => resolve(res),\n        fail: err => reject(err),\n      })\n    })\n  })\n  return Promise.all(promises)\n}\n\n// 画图像\nexport function drawImage(\n  image,\n  x,\n  y,\n  {\n    mode = 'scaleToFill',\n    width = image.width,\n    height = image.height,\n    borderRadius = 0,\n    borderWidth = 0,\n    borderColor = '#000',\n    draw = true,\n  } = {}\n) {\n  const ctx = this.getContext()\n  // 图形裁剪\n  let imgX = 0\n  let imgY = 0\n  let imgWidth = image.width\n  let imgHeight = image.height\n  const apsectWidth = width / imgWidth\n  const apsectHeight = height / imgHeight\n  const isWidthMoreLong = apsectWidth < apsectHeight\n  /** 安卓下会出现裁剪 gif 失败， 图片完全显示白色背景的现象 */\n  let needCutOut = !/\\.gif$/.test(image.path)\n  switch (mode) {\n    case 'aspectFit': {\n      if (isWidthMoreLong) {\n        height = imgHeight * apsectWidth\n      } else {\n        width = imgWidth * apsectHeight\n      }\n      break\n    }\n    case 'aspectFill': {\n      if (isWidthMoreLong) {\n        imgX = (imgWidth - width / apsectHeight) / 2\n        imgWidth = width / apsectHeight\n      } else {\n        imgY = (imgHeight - height / apsectWidth) / 2\n        imgHeight = height / apsectWidth\n      }\n      break\n    }\n    case 'widthFix': {\n      height = imgHeight * apsectWidth\n      break\n    }\n    case 'center': {\n      imgX = (imgWidth - width) / 2\n      imgY = (imgHeight - height) / 2\n      imgWidth = width\n      imgHeight = height\n      break\n    }\n    case 'top': {\n      imgX = (imgWidth - width) / 2\n      imgWidth = width\n      imgHeight = height\n      break\n    }\n    case 'bottom': {\n      imgX = (imgWidth - width) / 2\n      imgY = imgHeight - height\n      imgWidth = width\n      imgHeight = height\n      break\n    }\n    case 'left': {\n      imgY = (imgHeight - height) / 2\n      imgWidth = width\n      imgHeight = height\n      break\n    }\n    case 'right': {\n      imgX = imgWidth - width\n      imgY = (imgHeight - height) / 2\n      imgWidth = width\n      imgHeight = height\n      break\n    }\n    case 'none': {\n      needCutOut = false\n      break\n    }\n    default: {\n      break\n    }\n  }\n\n  if (draw) {\n    // 画边框\n    if (borderWidth > 0) {\n      // TODO 存在bug,不用 strokeRect(x, y, width, height, borderRadius, borderWidth, borderColor)\n      this.fillRect(\n        x - borderWidth,\n        y - borderWidth,\n        width + 2 * borderWidth,\n        height + 2 * borderWidth,\n        borderRadius + borderWidth,\n        borderColor\n      )\n    }\n\n    // 图形圆角效果\n    ctx.save()\n    this.createRectPath(x, y, width, height, borderRadius)\n    ctx.clip()\n    if (needCutOut) {\n      ctx.drawImage(image.path, imgX, imgY, imgWidth, imgHeight, x, y, width, height)\n    } else {\n      ctx.drawImage(image.path, x, y, width, height)\n    }\n    ctx.restore()\n  }\n\n  let rect = {\n    x: x - borderWidth,\n    y: y - borderWidth,\n    width: width + 2 * borderWidth,\n    height: height + 2 * borderWidth,\n  }\n  return utils.calcBoundingRect(rect)\n}\n","/**\n * 基本图形\n */\nimport utils from './utils/index'\n\n// 填充矩形\nexport function fillRect(x, y, width, height, borderRadius = 0, color = '#fff') {\n  const ctx = this.getContext()\n  this.createRectPath(x, y, width, height, borderRadius)\n  if (this.isLinearGradientString(color)) {\n    ctx.setFillStyle(this.createLinearGradient(x, y, x + width, y + height, color))\n  } else if (this.isCircularGradientString(color)) {\n    ctx.setFillStyle(this.createCircularGradient(x + width / 2, y + height / 2, Math.max(width, height) / 2, color))\n  } else {\n    ctx.setFillStyle(color)\n  }\n  ctx.fill()\n  // 微信小程序bug：两个路径有重叠时，使用clip会有问题，用如下代码可以解决\n  ctx.fillRect(0, 0, 0, 0)\n  let rect = {\n    x,\n    y,\n    width,\n    height,\n  }\n  return utils.calcBoundingRect(rect)\n}\n\n// 描边矩形\nexport function strokeRect(x, y, width, height, borderRadius = 0, borderWidth = 0, borderColor = '#fff') {\n  const ctx = this.getContext()\n  for (let i = 1; i <= borderWidth; i++) {\n    const currBorderWidth = i\n    this.createRectPath(\n      x - currBorderWidth,\n      y - currBorderWidth,\n      width + 2 * currBorderWidth,\n      height + 2 * currBorderWidth,\n      borderRadius + currBorderWidth\n    )\n    ctx.setStrokeStyle(borderColor)\n    ctx.stroke()\n  }\n  // 微信小程序bug：两个路径有重叠时，使用clip会有问题，用如下代码可以解决\n  ctx.fillRect(0, 0, 0, 0)\n  let rect = {\n    x,\n    y,\n    width: width + 2 * borderWidth,\n    height: height + 2 * borderWidth,\n  }\n  return utils.calcBoundingRect(rect)\n}\n","// 创建矩形路径\nimport utils from './utils/index'\n\nexport function createRectPath(x, y, width, height, radius) {\n  const ctx = this.getContext()\n  const leftTop = {x, y}\n  const rightTop = {x: x + width, y}\n  const rightBottom = {x: x + width, y: y + height}\n  const leftBottom = {x, y: y + height}\n  ctx.beginPath()\n  ctx.moveTo(leftTop.x, leftTop.y + radius)\n  ctx.arc(leftTop.x + radius, leftTop.y + radius, radius, utils.degToRad(180), utils.degToRad(270))\n  ctx.lineTo(rightTop.x - radius, rightTop.y)\n  ctx.arc(rightTop.x - radius, rightTop.y + radius, radius, utils.degToRad(270), utils.degToRad(360))\n  ctx.lineTo(rightBottom.x, rightBottom.y - radius)\n  ctx.arc(rightBottom.x - radius, rightBottom.y - radius, radius, utils.degToRad(0), utils.degToRad(90))\n  ctx.lineTo(leftBottom.x + radius, leftBottom.y)\n  ctx.arc(leftBottom.x + radius, leftBottom.y - radius, radius, utils.degToRad(90), utils.degToRad(180))\n  ctx.lineTo(leftTop.x, leftTop.y + radius)\n  ctx.closePath()\n}\n"],"sourceRoot":""}